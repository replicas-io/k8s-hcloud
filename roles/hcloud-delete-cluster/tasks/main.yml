---
- name: Detach volumes
  hcloud_volume:
    api_token: "{{ hcloudToken }}"
    name: "{{ item[0] }}.nodes.{{ cluster.name }}.{{ cluster.domain }}-vol{{ item[1] }}"
    server: ""
  loop: "{{ storageNodes | product(query('sequence', 'start=1 end='+storageDisks|string)) | list }}"
  register: result
  retries: 50
  delay: 3
  until: result is not failed
  when: storageDisks | int > 0

- name: Delete volumes
  hcloud_volume:
    api_token: "{{ hcloudToken }}"
    name: "{{ item[0] }}.nodes.{{ cluster.name }}.{{ cluster.domain }}-vol{{ item[1] }}"
    server: ""
    state: absent
  loop: "{{ storageNodes | product(query('sequence', 'start=1 end='+storageDisks|string)) | list }}"
  register: result
  retries: 50
  delay: 3
  until: result is not failed
  when: storageDisks | int > 0

- name: Delete cluster node
  hcloud_server:
    api_token: "{{ vaultHcloudToken }}"
    name: "{{ hostvars[item].ansible_host }}"
    state: absent
  loop: "{{ groups['all'] }}"
  register: result
  retries: 50
  delay: 3
  until: result is not failed

- name: Delete A record for node
  cloudflare_dns:
    zone: "{{ cluster.domain }}"
    record: "{{ hostvars[item].ansible_host }}"
    type: A
    account_email: "{{ vaultCloudflareEmail }}"
    account_api_token: "{{ vaultCloudflareToken }}"
    state: absent
  loop: "{{ groups['all'] }}"

# - name: Set the label selector for detecting floating IPs to delete
#   set_fact:
#     label:
#       owner: "{{ cluster.domain }}-LB-IP"
#
# - name: Get all floating IPs that match the label
#   hcloud_floating_ip_info:
#     api_token: "{{ vaultHcloudToken }}"
#     label_selector: "{{ label }}"
#   register: floatingIPs
#
# - name: Delete floating IPs
#   hcloud_floating_ip:
#     api_token: "{{ vaultHcloudToken }}"
#     id: "{{ item.id }}"
#     state: absent
#   loop: "{{ floatingIPs.hcloud_floating_ip_info }}"

- name: Delete the network
  hcloud_network:
    api_token: "{{ hcloudToken }}"
    name: "{{ cluster.network }}"
    state: absent

- name: Delete local cluster directory
  file:
    path: "{{ playbook_dir }}/replicas-cluster-{{ cluster.name }}.{{ cluster.domain }}"
    state: absent
